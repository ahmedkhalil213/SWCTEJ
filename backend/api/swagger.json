{
  "openapi": "3.0.0",
  "info": {
    "title": "Your API",
    "version": "1.0.0",
    "description": "API documentation for your routes",
    "license": {
      "name": "Licensed Under MIT",
      "url": "https://spdx.org/licenses/MIT.html"
    },
    "contact": {
      "name": "JSONPlaceholder",
      "url": "https://jsonplaceholder.typicode.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "Log in and get an authentication token",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login. Returns an authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
           
          },
          "401": {
            "description": "Authentication failed. Invalid email or password"
          }
        
        },
        "security": [

        ]
      }
    },
    "/api/addUser": {
      "post": {
        "summary": "Add a new user",
        "tags": ["users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Registration failed"
          }
        }
      }
    },
    "/api/actdisactAgent/{userId}": {
      "patch": {
        "summary": "Activate/Deactivate an agent user",
        "tags": ["users"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID of the agent to activate or deactivate."
          }
        ],
        "responses": {
          "200": {
            "description": "User activation status modified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A message indicating the activation status change."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the user doesn't have the role 'agent' or other validation errors."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating a server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/deleteUsers": {
      "delete": {
        "summary": "Delete users by IDs",
        "tags": ["users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users deleted successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/projects/createProject": {
      "post": {
        "summary": "Create a new project",
        "tags": ["Projects"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the project"
                  },
                  "description": {
                    "type": "string",
                    "description": "A brief description of the project"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The start date of the project (YYYY-MM-DD)"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The end date of the project (YYYY-MM-DD)"
                  }
                 
                },
                "required": ["name", "startDate", "endDate"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A success message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed to create a project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "An error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },"/api/projects/getProjects": {
      "get": {
        "summary": "Get a list of projects",
        "tags": ["Projects"],
        "parameters": [
          {
            "in": "query",
            "name": "label",
            "schema": {
              "type": "string"
            },
            "description": "Filter projects by label"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter projects by start date (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter projects by end date (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "isActive",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter projects by active status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "The unique identifier of the project"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the project"
                      },
                      "description": {
                        "type": "string",
                        "description": "A brief description of the project"
                      },
                      "startDate": {
                        "type": "string",
                        "format": "date",
                        "description": "The start date of the project (YYYY-MM-DD)"
                      },
                      "endDate": {
                        "type": "string",
                        "format": "date",
                        "description": "The end date of the project (YYYY-MM-DD)"
                      },
                      "isActive": {
                        "type": "boolean",
                        "description": "The active status of the project"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/projects/updateProject/{projectId}'": {
      "put": {
        "summary": "Update a project by ID",
        "tags": ["Projects"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The updated name of the project"
                  },
                  "description": {
                    "type": "string",
                    "description": "The updated description of the project"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The updated start date of the project (in YYYY-MM-DD format)"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The updated end date of the project (in YYYY-MM-DD format)"
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "The updated status of the project (true for active, false for inactive)"
                  }
               
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Failed to update the project"
          }
        }
      }
    },
    "/api/projects/deleteProjects": {
      "delete": {
        "summary": "Delete projects by IDs",
        "tags": ["Projects"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "An array of project IDs to delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Projects deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to delete projects"
          }
        }
      }
    },
    "/api/projects/{projectId}/associateUser": {
      "post": {
        "summary": "Associate users with a project",
        "tags": ["Projects"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "An array of user IDs to associate with the project"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users associated with the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the association was successful"
                    },
                    "message": {
                      "type": "string",
                      "description": "A message indicating the result"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Failed to associate the users with the project"
          }
        }
      }
    },
    "/api/projects/{projectId}/disassociateUser": {
      "post": {
        "summary": "Disassociate users from a project",
        "tags": ["Projects"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "An array of user IDs to disassociate from the project"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users disassociated from the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the disassociation was successful"
                    },
                    "message": {
                      "type": "string",
                      "description": "A message indicating the result"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Failed to disassociate the users from the project"
          }
        }
      }
    },
    "/api/projects/{projectId}": {
      "get": {
        "summary": "Get Project by ID",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The ID of the project to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "project": {
                      "type": "object",
                      "description": "The retrieved project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/createSprint": {
      "post": {
        "summary": "Create a new Sprint for a Project",
        "tags": ["Sprints"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The label of the Sprint"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The start date of the Sprint (YYYY-MM-DD)"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The end date of the Sprint (YYYY-MM-DD)"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the Sprint"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sprint created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A message indicating the result"
                    },
                    "sprint": {
                      "$ref": "#/components/schemas/Sprint"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Failed to create the Sprint"
          }
        }
      }
    },
    "/api/projects/{projectId}/sprints/{sprintId}/toggleStatus": {
      "put": {
        "summary": "Toggle the status of a Sprint",
        "tags": ["Sprints"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "sprintId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sprint status toggled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A message indicating the result"
                    },
                    "sprint": {
                      "$ref": "#/components/schemas/Sprint"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found or Sprint not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/projects/{projectId}/sprints/{sprintId}": {
      "put": {
        "summary": "Update a Sprint",
        "tags": ["Sprints"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "sprintId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Updated Sprint information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sprint"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sprint updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A message indicating the result"
                    },
                    "sprint": {
                      "$ref": "#/components/schemas/Sprint"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found or Sprint not found in the project"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/projects/{projectId}/sprints/delete": {
      "post": {
        "summary": "Delete Sprints",
        "tags": ["Sprints"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Sprint IDs to delete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sprintIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sprints deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A message indicating the result"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to delete sprints"
          }
        }
      }
    },
    "/api/projects/{projectId}/sprints": {
      "get": {
        "summary": "Get Sprints by Project",
        "tags": ["Sprints"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter1",
            "schema": {
              "type": "string",
              "description": "Example filter 1"
            }
          },
          {
            "in": "query",
            "name": "filter2",
            "schema": {
              "type": "string",
              "description": "Example filter 2"
            }
          },
          {
            "in": "query",
            "name": "filter3",
            "schema": {
              "type": "string",
              "description": "Example filter 3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sprints retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sprint"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/projects/{projectId}/sprints/{sprintId}/tasks": {
      "get": {
        "summary": "Get Sprint with Tasks",
        "tags": ["Sprints"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "sprintId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sprint with associated tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintWithTasks"
                }
              }
            }
          },
          "404": {
            "description": "Sprint not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{taskId}/associate": {
      "post": {
        "summary": "Associate User with Task",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "sprintId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "User ID to associate with the task",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User associated with the task successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Task does not belong to the specified Project and Sprint"
          },
          "404": {
            "description": "Task, User, Project, or Sprint not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{taskId}/disassociate": {
      "delete": {
        "summary": "Disassociate User from Task",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "sprintId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "User ID to disassociate from the task",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User disassociated from the task successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Task does not belong to the specified Project and Sprint"
          },
          "404": {
            "description": "Task, User, Project, or Sprint not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/:taskId/toggletask": {
      "put": {
        "summary": "Toggle Task Status",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task status toggled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{taskId}": {
      "get": {
        "summary": "Get Task by ID",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{taskId}": {
      "get": {
        "summary": "Get Task by ID",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the task to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/create": {
      "post": {
        "summary": "Create Task",
        "tags": ["Tasks"],
        "requestBody": {
          "description": "Task data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The label of the task"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The start date of the task"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The end date of the task"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the task"
                  },
                  "estimation": {
                    "type": "number",
                    "description": "The estimation of the task"
                  }
                },
                "required": ["label", "startDate", "endDate", "description", "estimation"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/update": {
      "put": {
        "summary": "Update Task",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "The ID of the task to update",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Updated task data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The updated label of the task"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The updated start date of the task"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The updated end date of the task"
                  },
                  "description": {
                    "type": "string",
                    "description": "The updated description of the task"
                  },
                  "estimation": {
                    "type": "number",
                    "description": "The updated estimation of the task"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/delete": {
      "post": {
        "summary": "Delete Multiple Tasks",
        "tags": ["Tasks"],
        "requestBody": {
          "description": "Array of task IDs to delete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "taskIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "An array of task IDs to delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tasks deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A success message indicating tasks were deleted"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/{taskId}/changestate": {
      "put": {
        "summary": "Change Task State",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "The ID of the task to change state",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "New state of the task ('Done', 'ToDo', 'inProgress')",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "enum": ["Done", "ToDo", "inProgress"],
                "description": "The new state of the task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task state changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A success message indicating the task state was changed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid state",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "An error message indicating an invalid state was provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "An error message indicating the task was not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/assign-to-sprint/{sprintId}": {
      "put": {
        "summary": "Assign Task to Sprint",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "The ID of the task to be assigned",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "description": "The ID of the sprint to which the task will be assigned",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task assigned to sprint successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "A flag indicating the success of the operation (true if successful)"
                    },
                    "message": {
                      "type": "string",
                      "description": "A message indicating the task was assigned to the sprint successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task or sprint not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "A flag indicating the success of the operation (false if unsuccessful)"
                    },
                    "message": {
                      "type": "string",
                      "description": "An error message indicating that the task or sprint was not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  }
}
